# -*- coding: utf-8 -*-
"""
Created on Sat Apr 15 10:04:04 2017

@author: Artem Los
"""

# TODO: See https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#/media/File:AES-ShiftRows.svg
# We have either the wrong MixColumn or ShiftRows

# 52E418CBB1BE4949308B381691B109FE

import sys


# we might have to swap key expanstion, etc and round keys
def AES():
    
    
    key = sys.stdin.buffer.read(16)
    
    roundKeys = KeyExpansion(key)
    
    while len(sys.stdin.buffer.peek(16)) > 0:
        sys.stdout.buffer.write (bytearray(EncryptBlock(bytearray(sys.stdin.buffer.read(16)), roundKeys)))
    

def EncryptBlock(block, roundKeys):

    State = block
    
    AddRoundKey(State, roundKeys,0)
    
    # First Nr-1 operations (encryption)
    for i in range(1,10):
        SubBytes(State)
        State = ShiftRows(State)
        MixColumns(State)
        
        AddRoundKey(State, roundKeys, i)

    # Last round
    
    SubBytes(State)
    State = ShiftRows(State)
    
    AddRoundKey(State, roundKeys, 10)
    
    return State

# Xor state and the round key
def AddRoundKey(state, roundKeys, j):
        
    for i in range(4):
        state[i] = (state[i] ^ roundKeys[4*j][i])

    for i in range(4):
        state[i+4] = (state[i+4] ^ roundKeys[4*j+1][i])
        
    for i in range(4):
        state[i+8] = (state[i+8]^ roundKeys[4*j+2][i])
        
    for i in range(4):
        state[i+12] = (state[i+12] ^ roundKeys[4*j+3][i])
    

def SubBytes(a):

    for i in range(16):
        a[i] = subBytes[a[i]]
    
    

# From https://golang.org/src/crypto/aes/const.go#L48
subBytes =[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

# From: https://en.wikipedia.org/wiki/Rijndael_mix_columns
mulBy2 = [
0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5]

# From: https://en.wikipedia.org/wiki/Rijndael_mix_columns
mulBy3 =[
0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a]


# TODO: not sure, but we need to change to based on def on p.104

def ShiftRows(c):
    
    #c = intToBin(c)[::-1] # copy c
    r = [0]*16
    
    
    r[0] = c[0]
    r[1] = c[5]
    r[2] = c[10]
    r[3] = c[15]
    
    r[4] = c[4]
    r[5] = c[9]
    r[6] = c[14]
    r[7] = c[3]
    
    r[8] = c[8]
    r[9] = c[13]
    r[10] = c[2]
    r[11] = c[7]
    
    r[12] = c[12]
    r[13] = c[1]
    r[14] = c[6]
    r[15] = c[11]
    
    return r
    #return int(''.join([str(x) for x in r]), 2)
    
    
# c is a 4 bit number (a column in the State matrix)
# TODO: not sure, but we need to change to i, i+1, ... in every row
def MixColumns(c):
    # [::-1] reverses the string
    #c = intToBin(c)[::-1]

    # for every column
    for i in range(4):
        r1 = mulBy2[(c[4*i])] ^ mulBy3[(c[4*i+1])] ^ (c[4*i+2]) ^ (c[4*i+3])
        r2 = mulBy2[(c[4*i+1])] ^ mulBy3[(c[4*i+2])] ^ (c[4*i+3]) ^ (c[4*i])
        r3 = mulBy2[(c[4*i+2])] ^ mulBy3[(c[4*i+3])] ^ (c[4*i]) ^ (c[4*i+1]) 
        r4 = mulBy2[(c[4*i+3])] ^ mulBy3[(c[4*i])] ^ (c[4*i+1]) ^ (c[4*i+2])
        
        c[4*i] = r1
        c[4*i+1] = r2
        c[4*i+2] = r3 
        c[4*i+3] = r4
    
    #return int(''.join([str(x) for x in r]), 2)

# TODO: something wrong with key expansion
# key is an array of bytes
def KeyExpansion(key):
    
    #key = bytearray.fromhex(key)
    R=[0]*11
    
    R[1] = bytearray.fromhex("01000000")
    R[2] = bytearray.fromhex("02000000")
    R[3] = bytearray.fromhex("04000000")
    R[4] = bytearray.fromhex("08000000")
    R[5] = bytearray.fromhex("10000000")
    R[6] = bytearray.fromhex("20000000")
    R[7] = bytearray.fromhex("40000000")
    R[8] = bytearray.fromhex("80000000")
    R[9] = bytearray.fromhex("1b000000")
    R[10] =bytearray.fromhex("36000000")
    
    w = [0]*44
    for i in range(4):
        w[i]  = ([key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]])
    
    for i in range(4,44):
      
        temp = w[i-1]
        
        if i%4 == 0:
            temp = xor(SubWord(RotWord(temp)),  R[i//4])

        w[i] = xor((w[i-4])[:] , temp) 
        
    return w

def xor(worda, wordb):

    worda[0]  = worda[0] ^ wordb[0] 
    worda[1]  = worda[1] ^ wordb[1] 
    worda[2]  = worda[2] ^ wordb[2] 
    worda[3]  = worda[3] ^ wordb[3] 
    
    return worda

#https://en.wikipedia.org/wiki/Rijndael_mix_columns#STEP_1_:_Polynomial_multiplication
# a is an array of bytes
def RotWord(a):
    
    b = [0]*4
    b[0] = a[1]
    b[1] = a[2]
    b[2] = a[3]
    b[3] = a[0]
    
    return b

#a is an array of bytes
def SubWord(a):

    for i in range(4):
        a[i] = subBytes[a[i]]
    
    return a





# why alwayszeros in every round (2nd position)
#print(bytearray(AES("F295B9318B994434D93D98A4E449AFD8", "F4C020A0A1F604FD343FAC6A7E6AE0F9")).hex())
#print(bytearray(AES("F4C020A0A1F604FD343FAC6A7E6AE0F9", "F295B9318B994434D93D98A4E449AFD8")).hex())



AES()


#print(sys.stdin.buffer.)



    
#a = list(bytearray(a, "utf-8"))
#print(a)
    


